(ns dots.typescript.completion-entry
  (:refer-clojure :exclude [name symbol]))

(defn name
  "**Returns:** `string`"
  ^js [completion-entry]
  (.-name ^js completion-entry))

(defn set-name!
  ^js [completion-entry value]
  (set! (.-name ^js completion-entry) value))

(defn kind
  "**Returns:** `ScriptElementKind`"
  ^js [completion-entry]
  (.-kind ^js completion-entry))

(defn set-kind!
  ^js [completion-entry value]
  (set! (.-kind ^js completion-entry) value))

(defn kind-modifiers
  "**Returns:** `string | undefined`"
  ^js [completion-entry]
  (.-kindModifiers ^js completion-entry))

(defn set-kind-modifiers!
  ^js [completion-entry value]
  (set! (.-kindModifiers ^js completion-entry) value))

(defn sort-text
  "**Returns:** `string`"
  ^js [completion-entry]
  (.-sortText ^js completion-entry))

(defn set-sort-text!
  ^js [completion-entry value]
  (set! (.-sortText ^js completion-entry) value))

(defn insert-text
  "**Returns:** `string | undefined`"
  ^js [completion-entry]
  (.-insertText ^js completion-entry))

(defn set-insert-text!
  ^js [completion-entry value]
  (set! (.-insertText ^js completion-entry) value))

(defn filter-text
  "**Returns:** `string | undefined`"
  ^js [completion-entry]
  (.-filterText ^js completion-entry))

(defn set-filter-text!
  ^js [completion-entry value]
  (set! (.-filterText ^js completion-entry) value))

(defn snippet
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-isSnippet ^js completion-entry))

(defn set-is-snippet!
  ^js [completion-entry value]
  (set! (.-isSnippet ^js completion-entry) value))

(defn replacement-span
  "An optional span that indicates the text to be replaced by this completion item.
   If present, this span should be used instead of the default one.
   It will be set if the required span differs from the one generated by the default replacement behavior.
   
   **Returns:** `TextSpan | undefined`"
  ^js [completion-entry]
  (.-replacementSpan ^js completion-entry))

(defn set-replacement-span!
  "An optional span that indicates the text to be replaced by this completion item.
   If present, this span should be used instead of the default one.
   It will be set if the required span differs from the one generated by the default replacement behavior."
  ^js [completion-entry value]
  (set! (.-replacementSpan ^js completion-entry) value))

(defn has-action
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-hasAction ^js completion-entry))

(defn set-has-action!
  ^js [completion-entry value]
  (set! (.-hasAction ^js completion-entry) value))

(defn source
  "**Returns:** `string | undefined`"
  ^js [completion-entry]
  (.-source ^js completion-entry))

(defn set-source!
  ^js [completion-entry value]
  (set! (.-source ^js completion-entry) value))

(defn source-display
  "**Returns:** `SymbolDisplayPart[] | undefined`"
  ^js [completion-entry]
  (.-sourceDisplay ^js completion-entry))

(defn set-source-display!
  ^js [completion-entry value]
  (set! (.-sourceDisplay ^js completion-entry) value))

(defn label-details
  "**Returns:** `CompletionEntryLabelDetails | undefined`"
  ^js [completion-entry]
  (.-labelDetails ^js completion-entry))

(defn set-label-details!
  ^js [completion-entry value]
  (set! (.-labelDetails ^js completion-entry) value))

(defn recommended
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-isRecommended ^js completion-entry))

(defn set-is-recommended!
  ^js [completion-entry value]
  (set! (.-isRecommended ^js completion-entry) value))

(defn from-unchecked-file
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-isFromUncheckedFile ^js completion-entry))

(defn set-is-from-unchecked-file!
  ^js [completion-entry value]
  (set! (.-isFromUncheckedFile ^js completion-entry) value))

(defn package-json-import
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-isPackageJsonImport ^js completion-entry))

(defn set-is-package-json-import!
  ^js [completion-entry value]
  (set! (.-isPackageJsonImport ^js completion-entry) value))

(defn import-statement-completion
  "**Returns:** `true | undefined`"
  ^js [completion-entry]
  (.-isImportStatementCompletion ^js completion-entry))

(defn set-is-import-statement-completion!
  ^js [completion-entry value]
  (set! (.-isImportStatementCompletion ^js completion-entry) value))

(defn symbol
  "For API purposes.
   Included for non-string completions only when `includeSymbol: true` option is passed to `getCompletionsAtPosition`.
   
   **Returns:** `Symbol | undefined`"
  ^js [completion-entry]
  (.-symbol ^js completion-entry))

(defn set-symbol!
  "For API purposes.
   Included for non-string completions only when `includeSymbol: true` option is passed to `getCompletionsAtPosition`."
  ^js [completion-entry value]
  (set! (.-symbol ^js completion-entry) value))

(defn data
  "A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,
   that allows TS Server to look up the symbol represented by the completion item, disambiguating
   items with the same name. Currently only defined for auto-import completions, but the type is
   `unknown` in the protocol, so it can be changed as needed to support other kinds of completions.
   The presence of this property should generally not be used to assume that this completion entry
   is an auto-import.
   
   **Returns:** `CompletionEntryData | undefined`"
  ^js [completion-entry]
  (.-data ^js completion-entry))

(defn set-data!
  "A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,
   that allows TS Server to look up the symbol represented by the completion item, disambiguating
   items with the same name. Currently only defined for auto-import completions, but the type is
   `unknown` in the protocol, so it can be changed as needed to support other kinds of completions.
   The presence of this property should generally not be used to assume that this completion entry
   is an auto-import."
  ^js [completion-entry value]
  (set! (.-data ^js completion-entry) value))
