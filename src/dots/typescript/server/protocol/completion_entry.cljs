(ns dots.typescript.server.protocol.completion-entry
  "An item found in a completion response."
  (:refer-clojure :exclude [name]))

(defn name
  "The symbol's name."
  ^js [completion-entry]
  (.-name ^js completion-entry))

(defn set-name!
  "The symbol's name."
  ^js [completion-entry value]
  (set! (.-name ^js completion-entry) value))

(defn kind
  "The symbol's kind (such as 'className' or 'parameterName')."
  ^js [completion-entry]
  (.-kind ^js completion-entry))

(defn set-kind!
  "The symbol's kind (such as 'className' or 'parameterName')."
  ^js [completion-entry value]
  (set! (.-kind ^js completion-entry) value))

(defn kind-modifiers
  "Optional modifiers for the kind (such as 'public')."
  ^js [completion-entry]
  (.-kindModifiers ^js completion-entry))

(defn set-kind-modifiers!
  "Optional modifiers for the kind (such as 'public')."
  ^js [completion-entry value]
  (set! (.-kindModifiers ^js completion-entry) value))

(defn sort-text
  "A string that is used for comparing completion items so that they can be ordered.  This
   is often the same as the name but may be different in certain circumstances."
  ^js [completion-entry]
  (.-sortText ^js completion-entry))

(defn set-sort-text!
  "A string that is used for comparing completion items so that they can be ordered.  This
   is often the same as the name but may be different in certain circumstances."
  ^js [completion-entry value]
  (set! (.-sortText ^js completion-entry) value))

(defn insert-text
  "Text to insert instead of `name`.
   This is used to support bracketed completions; If `name` might be \"a-b\" but `insertText` would be `[\"a-b\"]`,
   coupled with `replacementSpan` to replace a dotted access with a bracket access."
  ^js [completion-entry]
  (.-insertText ^js completion-entry))

(defn set-insert-text!
  "Text to insert instead of `name`.
   This is used to support bracketed completions; If `name` might be \"a-b\" but `insertText` would be `[\"a-b\"]`,
   coupled with `replacementSpan` to replace a dotted access with a bracket access."
  ^js [completion-entry value]
  (set! (.-insertText ^js completion-entry) value))

(defn filter-text
  "A string that should be used when filtering a set of
   completion items."
  ^js [completion-entry]
  (.-filterText ^js completion-entry))

(defn set-filter-text!
  "A string that should be used when filtering a set of
   completion items."
  ^js [completion-entry value]
  (set! (.-filterText ^js completion-entry) value))

(defn snippet
  "`insertText` should be interpreted as a snippet if true."
  ^js [completion-entry]
  (.-isSnippet ^js completion-entry))

(defn set-is-snippet!
  "`insertText` should be interpreted as a snippet if true."
  ^js [completion-entry value]
  (set! (.-isSnippet ^js completion-entry) value))

(defn replacement-span
  "An optional span that indicates the text to be replaced by this completion item.
   If present, this span should be used instead of the default one.
   It will be set if the required span differs from the one generated by the default replacement behavior."
  ^js [completion-entry]
  (.-replacementSpan ^js completion-entry))

(defn set-replacement-span!
  "An optional span that indicates the text to be replaced by this completion item.
   If present, this span should be used instead of the default one.
   It will be set if the required span differs from the one generated by the default replacement behavior."
  ^js [completion-entry value]
  (set! (.-replacementSpan ^js completion-entry) value))

(defn has-action
  "Indicates whether commiting this completion entry will require additional code actions to be
   made to avoid errors. The CompletionEntryDetails will have these actions."
  ^js [completion-entry]
  (.-hasAction ^js completion-entry))

(defn set-has-action!
  "Indicates whether commiting this completion entry will require additional code actions to be
   made to avoid errors. The CompletionEntryDetails will have these actions."
  ^js [completion-entry value]
  (set! (.-hasAction ^js completion-entry) value))

(defn source
  "Identifier (not necessarily human-readable) identifying where this completion came from."
  ^js [completion-entry]
  (.-source ^js completion-entry))

(defn set-source!
  "Identifier (not necessarily human-readable) identifying where this completion came from."
  ^js [completion-entry value]
  (set! (.-source ^js completion-entry) value))

(defn source-display
  "Human-readable description of the `source`."
  ^js [completion-entry]
  (.-sourceDisplay ^js completion-entry))

(defn set-source-display!
  "Human-readable description of the `source`."
  ^js [completion-entry value]
  (set! (.-sourceDisplay ^js completion-entry) value))

(defn label-details
  "Additional details for the label."
  ^js [completion-entry]
  (.-labelDetails ^js completion-entry))

(defn set-label-details!
  "Additional details for the label."
  ^js [completion-entry value]
  (set! (.-labelDetails ^js completion-entry) value))

(defn recommended
  "If true, this completion should be highlighted as recommended. There will only be one of these.
   This will be set when we know the user should write an expression with a certain type and that type is an enum or constructable class.
   Then either that enum/class or a namespace containing it will be the recommended symbol."
  ^js [completion-entry]
  (.-isRecommended ^js completion-entry))

(defn set-is-recommended!
  "If true, this completion should be highlighted as recommended. There will only be one of these.
   This will be set when we know the user should write an expression with a certain type and that type is an enum or constructable class.
   Then either that enum/class or a namespace containing it will be the recommended symbol."
  ^js [completion-entry value]
  (set! (.-isRecommended ^js completion-entry) value))

(defn from-unchecked-file
  "If true, this completion was generated from traversing the name table of an unchecked JS file,
   and therefore may not be accurate."
  ^js [completion-entry]
  (.-isFromUncheckedFile ^js completion-entry))

(defn set-is-from-unchecked-file!
  "If true, this completion was generated from traversing the name table of an unchecked JS file,
   and therefore may not be accurate."
  ^js [completion-entry value]
  (set! (.-isFromUncheckedFile ^js completion-entry) value))

(defn package-json-import
  "If true, this completion was for an auto-import of a module not yet in the program, but listed
   in the project package.json. Used for telemetry reporting."
  ^js [completion-entry]
  (.-isPackageJsonImport ^js completion-entry))

(defn set-is-package-json-import!
  "If true, this completion was for an auto-import of a module not yet in the program, but listed
   in the project package.json. Used for telemetry reporting."
  ^js [completion-entry value]
  (set! (.-isPackageJsonImport ^js completion-entry) value))

(defn import-statement-completion
  "If true, this completion was an auto-import-style completion of an import statement (i.e., the
   module specifier was inserted along with the imported identifier). Used for telemetry reporting."
  ^js [completion-entry]
  (.-isImportStatementCompletion ^js completion-entry))

(defn set-is-import-statement-completion!
  "If true, this completion was an auto-import-style completion of an import statement (i.e., the
   module specifier was inserted along with the imported identifier). Used for telemetry reporting."
  ^js [completion-entry value]
  (set! (.-isImportStatementCompletion ^js completion-entry) value))

(defn data
  "A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,
   that allows TS Server to look up the symbol represented by the completion item, disambiguating
   items with the same name."
  ^js [completion-entry]
  (.-data ^js completion-entry))

(defn set-data!
  "A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,
   that allows TS Server to look up the symbol represented by the completion item, disambiguating
   items with the same name."
  ^js [completion-entry value]
  (set! (.-data ^js completion-entry) value))
